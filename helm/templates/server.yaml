apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-server"
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-server"
  serviceName: "{{ .Release.Name }}-headless"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-server"
    spec:
      containers:
        - name: server
          image: {{ .Values.server.image | required "server.image is required" | quote }}
          tty: true
          stdin: true
{{/*          resources: {{- toYaml .Values.server.resources | indent 12 }}*/}}
          {{- if .Values.server.storage.enabled }}
          volumeMounts:
            - name: server-data
              mountPath: /srv/server/
              subPath: data/
          {{- end }}
      {{- if .Values.server.storage.enabled }}
      volumes:
        - name: server-data
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-server-data"
            readOnly: false
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-headless"
spec:
  clusterIP: None
  selector:
    app: "{{ .Release.Name }}-server"
---
{{- if .Values.server.storage.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Release.Name }}-server-data"
  annotations:
    "helm.sh/resource-policy": keep
spec:
  accessModes:
    - ReadWriteOnce
  {{- if .Values.server.storage.class }}
  storageClassName: {{ .Values.server.storage.class | quote }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.server.storage.size | quote }}
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-node-port"
spec:
  type: NodePort
  selector:
    app: "{{ .Release.Name }}-server"
